#BlueJ class context
comment0.target=ProgrammeMatriceEntier
comment0.text=\r\n\ D\u00E9crivez\ votre\ classe\ ProgrammeMatriceEntier\ ici.\r\n\r\n\ @author\ (votre\ nom)\r\n\ @version\ (un\ num\u00E9ro\ de\ version\ ou\ une\ date)\r\n
comment1.params=pfNbL\ pfNbC
comment1.target=MatriceEntier\ creerMatrice(int,\ int)
comment1.text=\r\n\ Creer\ une\ MatriceEntier\ avec\ pfNbL\ lignes\ et\ pfNbC\ colonnes\r\n\ \r\n\ @param\ pfNbL\ IN\:\ nombre\ de\ lignes\r\n\ @param\ pfNbC\ IN\ \:\ nombre\ de\ colonnes\r\n\ \r\n\ @return\ MatriceEntier\r\n
comment10.params=pfMat\ pfVal
comment10.target=void\ setPremiereDiagonale(MatriceEntier,\ int)
comment10.text=\ affecte\ tous\ les\ \u00E9l\u00E9ments\ de\ la\ diagonale\ avec\ la\ valeur\ donn\u00E9e\r\n\ @param\ pfMat\ IN/OUT\ la\ matrice\r\n\ @param\ pfVal\ IN\ la\ valeur\r\n\ @throws\ Exception\ si\ la\ matrice\ n'est\ pas\ carr\u00E9e\r\n
comment11.params=pfMat\ pfVal
comment11.target=void\ setSecondeDiagonale(MatriceEntier,\ int)
comment11.text=\ affecte\ tous\ les\ \u00E9l\u00E9ments\ de\ la\ seconde\ diagonale\ avec\ la\ valeur\ donn\u00E9e\r\n\ @param\ pfMat\ IN/OUT\ la\ matrice\r\n\ @param\ pfVal\ IN\ la\ valeur\r\n\ @throws\ Exception\ si\ la\ matrice\ n'est\ pas\ carr\u00E9e\r\n
comment12.params=pfMat\ Val
comment12.target=void\ mulMatNombre(MatriceEntier,\ int)
comment12.text=\r\n\ multiplie\ chaque\ valeur\ de\ la\ matrice\ par\ un\ nombre\r\n\ @param\ pfMat\ IN/OUT\ la\ matrice\r\n\ @param\ Val\ IN\ la\ valeur\r\n
comment13.params=pfMat
comment13.target=java.lang.String\ toString(MatriceEntier)
comment13.text=\r\n\ Retourne\ une\ chaine\ format\u00E9\ d'une\ matrice\ pfMat\r\n\ \r\n\ @param\ pfMat\ IN\:\ MatriceEntier\ a\ formater\r\n\ @return\ String\:\ chaine\ format\u00E9\r\n
comment14.params=pfMat
comment14.target=java.lang.String\ toHTML(MatriceEntier)
comment14.text=\r\n\ Retourne\ une\ chaine\ format\u00E9\ d'une\ matrice\ pfMat\ au\ format\ HTML\r\n\ \r\n\ @param\ pfMAt\ IN\:\ MatriceEntier\ a\ formater\r\n\ @return\ String\:\ chaine\ format\u00E9\ au\ format\ HTML\r\n
comment2.params=pfMat
comment2.target=int\ getNbLignes(MatriceEntier)
comment2.text=\r\n\ Retourne\ le\ nombre\ de\ lignes\ d'une\ matrice\ pfMat\r\n\ \r\n\ @param\ pfMat\ IN\ \:\ MatriceEntier\r\n\ @return\ entier\:\ nombre\ de\ colonnes\r\n
comment3.params=pfMat
comment3.target=int\ getNbColonnes(MatriceEntier)
comment3.text=\r\n\ Retourne\ le\ nombre\ de\ colonnes\ d'une\ matrice\ pfMat\r\n\ \r\n\ @param\ pfMat\ IN\ \:\ MatriceEntier\r\n\ @return\ entier\ \:\ nombre\ de\ colonnes\r\n
comment4.params=pfMat\ pfL\ pfC
comment4.target=int\ getElement(MatriceEntier,\ int,\ int)
comment4.text=\r\n\ Retourne\ l'element\ de\ pfMat\ a\ la\ ligne\ pfL\ et\ la\ colonne\ pfC\r\n\ \r\n\ @param\ pfMat\ IN\ \:\ MatriceEntier\ a\ chercher\r\n\ @param\ pfL\ IN\ \:\ Ligne\ de\ l'element\ rechercher\r\n\ @param\ pfC\ IN\:\ Colonne\ de\ l'\u00E9l\u00E9ment\ rechercher\r\n\ @return\ int\ \:\ Element\ rechercher\r\n\ @throws\ Exception\ si\ 0\ >\ pfL\ OU\ pfL\ >\ getNbLigne(pfMat)\ ou\ 0\ >\ pfC\ ou\ pfC\ \ getNbColonnes(pfMat)\r\n
comment5.params=pfMat\ pfL
comment5.target=int\ somLigne(MatriceEntier,\ int)
comment5.text=\r\n\ Retourne\ la\ somme\ des\ element\ de\ la\ ligne\ pfL\ d'une\ matrice\r\n\ \r\n\ @param\ pfMat\ IN\:\ MatriceEntier\ a\ parcourir\r\n\ @param\ pfL\ IN\ \:\ Ligne\ de\ la\ matrice\ a\ additionn\u00E9\r\n\ @return\ entier\ \:\ Somme\ des\ \u00E9l\u00E9ments\ de\ la\ ligne\ pfL\ de\ la\ matrice\r\n\ @trhows\ Exception\ si\ pfL\ <\ 0\ ou\ pfL\ >\ getNbLignes(pfMat)\r\n
comment6.params=pfMat\ pfC
comment6.target=int\ somColonne(MatriceEntier,\ int)
comment6.text=\r\n\ Retourne\ la\ somme\ d'une\ colonne\ pfC\ d'une\ matrice\r\n\ \r\n\ @param\ pfMat\ IN\:\ MatriceEntier\ a\ parcourir\r\n\ @param\ pfC\ IN\ \:\ Colonne\ a\ additionn\u00E9\r\n\ @return\ entier\:\ somme\ des\ elements\ de\ la\ colonne\ pfC\r\n\ @throws\ Exception\ si\ pfC\ <\ 0\ ou\ pfC\ >\ getNbColonnes(pfMat)\r\n
comment7.params=pfMat
comment7.target=boolean\ estCarree(MatriceEntier)
comment7.text=\r\n\ Retourne\ vrai\ si\ la\ matrice\ est\ carr\u00E9e\r\n\ \r\n\ @param\ pfMat\ IN\:\ MatriceEntier\ a\ verifier\r\n\ @return\ boolean\ \:\ Etat\ de\ la\ matrice\r\n
comment8.params=pfMat
comment8.target=boolean\ estDiagonale(MatriceEntier)
comment8.text=\ recherche\ si\ la\ matrice\ est\ diagonale\r\n\ @param\ pfMat\ IN\ la\ matrice\r\n\ @return\ vrai\ si\ la\ matrice\ est\ diagonale\ et\ faux\ sinon\r\n\ @throws\ Exception\ si\ la\ matrice\ n'est\ pas\ carr\u00E9e\r\n
comment9.params=pfMat\ pfL\ pfC\ pfEl
comment9.target=void\ setElement(MatriceEntier,\ int,\ int,\ int)
comment9.text=\r\n\ met\ l'\u00E9l\u00E9ment\ pfEl\ dans\ l'emplacement\ pfL,pfC\ de\ la\ matrice\ pfMAt\r\n\ \r\n\ @param\ pfMat\:\ IN/OUT\ \:\ Matrice\ a\ modifier\r\n\ @param\ pfL\ IN\:\ Ligne\ ou\ placer\ l'\u00E9l\u00E9ment\r\n\ @param\ pfC\ IN\:\ colonnes\ ou\ placer\ l'\u00E9l\u00E9ment\r\n\ @param\ pfEl\ IN\:\ element\ a\ placer\r\n\ throws\ exception\ si\ 0\ >\ pfL\ OU\ pfL\ >\ getNbLigne(pfMat)\ ou\ 0\ >\ pfC\ ou\ pfC\ \ getNbColonnes(pfMat)\r\n
numComments=15
